call javaapi#namespace('java.awt.image')

call javaapi#class('AffineTransformOp', 'RasterOp', [
  \ javaapi#field(1,'TYPE_NEAREST_NEIGHBOR', 'int'),
  \ javaapi#field(1,'TYPE_BILINEAR', 'int'),
  \ javaapi#field(1,'TYPE_BICUBIC', 'int'),
  \ javaapi#method(0,'AffineTransformOp(', 'AffineTransform, RenderingHints)', 'public'),
  \ javaapi#method(0,'AffineTransformOp(', 'AffineTransform, int)', 'public'),
  \ javaapi#method(0,'getInterpolationType(', ')', 'int'),
  \ javaapi#method(0,'filter(', 'BufferedImage, BufferedImage)', 'BufferedImage'),
  \ javaapi#method(0,'filter(', 'Raster, WritableRaster)', 'WritableRaster'),
  \ javaapi#method(0,'getBounds2D(', 'BufferedImage)', 'Rectangle2D'),
  \ javaapi#method(0,'getBounds2D(', 'Raster)', 'Rectangle2D'),
  \ javaapi#method(0,'createCompatibleDestImage(', 'BufferedImage, ColorModel)', 'BufferedImage'),
  \ javaapi#method(0,'createCompatibleDestRaster(', 'Raster)', 'WritableRaster'),
  \ javaapi#method(0,'getPoint2D(', 'Point2D, Point2D)', 'Point2D'),
  \ javaapi#method(0,'getTransform(', ')', 'AffineTransform'),
  \ javaapi#method(0,'getRenderingHints(', ')', 'RenderingHints'),
  \ ])

call javaapi#class('AreaAveragingScaleFilter', 'ReplicateScaleFilter', [
  \ javaapi#method(0,'AreaAveragingScaleFilter(', 'int, int)', 'public'),
  \ javaapi#method(0,'setHints(', 'int)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, ColorModel, byte[], int, int)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, ColorModel, int[], int, int)', 'void'),
  \ ])

call javaapi#class('BandCombineOp', 'RasterOp', [
  \ javaapi#method(0,'BandCombineOp(', 'float[][], RenderingHints)', 'public'),
  \ javaapi#method(0,'getMatrix(', ')', 'float[][]'),
  \ javaapi#method(0,'filter(', 'Raster, WritableRaster)', 'WritableRaster'),
  \ javaapi#method(0,'getBounds2D(', 'Raster)', 'Rectangle2D'),
  \ javaapi#method(0,'createCompatibleDestRaster(', 'Raster)', 'WritableRaster'),
  \ javaapi#method(0,'getPoint2D(', 'Point2D, Point2D)', 'Point2D'),
  \ javaapi#method(0,'getRenderingHints(', ')', 'RenderingHints'),
  \ ])

call javaapi#class('BandedSampleModel', 'ComponentSampleModel', [
  \ javaapi#method(0,'BandedSampleModel(', 'int, int, int, int)', 'public'),
  \ javaapi#method(0,'BandedSampleModel(', 'int, int, int, int, int[], int[])', 'public'),
  \ javaapi#method(0,'createCompatibleSampleModel(', 'int, int)', 'SampleModel'),
  \ javaapi#method(0,'createSubsetSampleModel(', 'int[])', 'SampleModel'),
  \ javaapi#method(0,'createDataBuffer(', ')', 'DataBuffer'),
  \ javaapi#method(0,'getDataElements(', 'int, int, Object, DataBuffer)', 'Object'),
  \ javaapi#method(0,'getPixel(', 'int, int, int[], DataBuffer)', 'int[]'),
  \ javaapi#method(0,'getPixels(', 'int, int, int, int, int[], DataBuffer)', 'int[]'),
  \ javaapi#method(0,'getSample(', 'int, int, int, DataBuffer)', 'int'),
  \ javaapi#method(0,'getSampleFloat(', 'int, int, int, DataBuffer)', 'float'),
  \ javaapi#method(0,'getSampleDouble(', 'int, int, int, DataBuffer)', 'double'),
  \ javaapi#method(0,'getSamples(', 'int, int, int, int, int, int[], DataBuffer)', 'int[]'),
  \ javaapi#method(0,'setDataElements(', 'int, int, Object, DataBuffer)', 'void'),
  \ javaapi#method(0,'setPixel(', 'int, int, int[], DataBuffer)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, int[], DataBuffer)', 'void'),
  \ javaapi#method(0,'setSample(', 'int, int, int, int, DataBuffer)', 'void'),
  \ javaapi#method(0,'setSample(', 'int, int, int, float, DataBuffer)', 'void'),
  \ javaapi#method(0,'setSample(', 'int, int, int, double, DataBuffer)', 'void'),
  \ javaapi#method(0,'setSamples(', 'int, int, int, int, int, int[], DataBuffer)', 'void'),
  \ javaapi#method(0,'hashCode(', ')', 'int'),
  \ ])

call javaapi#class('BufferedImageFilter', 'ImageFilter', [
  \ javaapi#method(0,'BufferedImageFilter(', 'BufferedImageOp)', 'public'),
  \ javaapi#method(0,'getBufferedImageOp(', ')', 'BufferedImageOp'),
  \ javaapi#method(0,'setDimensions(', 'int, int)', 'void'),
  \ javaapi#method(0,'setColorModel(', 'ColorModel)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, ColorModel, byte[], int, int)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, ColorModel, int[], int, int)', 'void'),
  \ javaapi#method(0,'imageComplete(', 'int)', 'void'),
  \ ])

call javaapi#interface('BufferedImageOp', '', [
  \ javaapi#method(0,'filter(', 'BufferedImage, BufferedImage)', 'BufferedImage'),
  \ javaapi#method(0,'getBounds2D(', 'BufferedImage)', 'Rectangle2D'),
  \ javaapi#method(0,'createCompatibleDestImage(', 'BufferedImage, ColorModel)', 'BufferedImage'),
  \ javaapi#method(0,'getPoint2D(', 'Point2D, Point2D)', 'Point2D'),
  \ javaapi#method(0,'getRenderingHints(', ')', 'RenderingHints'),
  \ ])

call javaapi#class('ByteLookupTable', 'LookupTable', [
  \ javaapi#method(0,'ByteLookupTable(', 'int, byte[][])', 'public'),
  \ javaapi#method(0,'ByteLookupTable(', 'int, byte[])', 'public'),
  \ javaapi#method(0,'getTable(', ')', 'byte[][]'),
  \ javaapi#method(0,'lookupPixel(', 'int[], int[])', 'int[]'),
  \ javaapi#method(0,'lookupPixel(', 'byte[], byte[])', 'byte[]'),
  \ ])

call javaapi#class('ColorConvertOp', 'RasterOp', [
  \ javaapi#method(0,'ColorConvertOp(', 'RenderingHints)', 'public'),
  \ javaapi#method(0,'ColorConvertOp(', 'ColorSpace, RenderingHints)', 'public'),
  \ javaapi#method(0,'ColorConvertOp(', 'ColorSpace, ColorSpace, RenderingHints)', 'public'),
  \ javaapi#method(0,'ColorConvertOp(', 'ICC_Profile[], RenderingHints)', 'public'),
  \ javaapi#method(0,'getICC_Profiles(', ')', 'ICC_Profile[]'),
  \ javaapi#method(0,'filter(', 'BufferedImage, BufferedImage)', 'BufferedImage'),
  \ javaapi#method(0,'filter(', 'Raster, WritableRaster)', 'WritableRaster'),
  \ javaapi#method(0,'getBounds2D(', 'BufferedImage)', 'Rectangle2D'),
  \ javaapi#method(0,'getBounds2D(', 'Raster)', 'Rectangle2D'),
  \ javaapi#method(0,'createCompatibleDestImage(', 'BufferedImage, ColorModel)', 'BufferedImage'),
  \ javaapi#method(0,'createCompatibleDestRaster(', 'Raster)', 'WritableRaster'),
  \ javaapi#method(0,'getPoint2D(', 'Point2D, Point2D)', 'Point2D'),
  \ javaapi#method(0,'getRenderingHints(', ')', 'RenderingHints'),
  \ ])

call javaapi#class('ComponentColorModel', 'ColorModel', [
  \ javaapi#method(0,'ComponentColorModel(', 'ColorSpace, int[], boolean, boolean, int, int)', 'public'),
  \ javaapi#method(0,'ComponentColorModel(', 'ColorSpace, boolean, boolean, int, int)', 'public'),
  \ javaapi#method(0,'getRed(', 'int)', 'int'),
  \ javaapi#method(0,'getGreen(', 'int)', 'int'),
  \ javaapi#method(0,'getBlue(', 'int)', 'int'),
  \ javaapi#method(0,'getAlpha(', 'int)', 'int'),
  \ javaapi#method(0,'getRGB(', 'int)', 'int'),
  \ javaapi#method(0,'getRed(', 'Object)', 'int'),
  \ javaapi#method(0,'getGreen(', 'Object)', 'int'),
  \ javaapi#method(0,'getBlue(', 'Object)', 'int'),
  \ javaapi#method(0,'getAlpha(', 'Object)', 'int'),
  \ javaapi#method(0,'getRGB(', 'Object)', 'int'),
  \ javaapi#method(0,'getDataElements(', 'int, Object)', 'Object'),
  \ javaapi#method(0,'getComponents(', 'int, int[], int)', 'int[]'),
  \ javaapi#method(0,'getComponents(', 'Object, int[], int)', 'int[]'),
  \ javaapi#method(0,'getUnnormalizedComponents(', 'float[], int, int[], int)', 'int[]'),
  \ javaapi#method(0,'getNormalizedComponents(', 'int[], int, float[], int)', 'float[]'),
  \ javaapi#method(0,'getDataElement(', 'int[], int)', 'int'),
  \ javaapi#method(0,'getDataElements(', 'int[], int, Object)', 'Object'),
  \ javaapi#method(0,'getDataElement(', 'float[], int)', 'int'),
  \ javaapi#method(0,'getDataElements(', 'float[], int, Object)', 'Object'),
  \ javaapi#method(0,'getNormalizedComponents(', 'Object, float[], int)', 'float[]'),
  \ javaapi#method(0,'coerceData(', 'WritableRaster, boolean)', 'ColorModel'),
  \ javaapi#method(0,'isCompatibleRaster(', 'Raster)', 'boolean'),
  \ javaapi#method(0,'createCompatibleWritableRaster(', 'int, int)', 'WritableRaster'),
  \ javaapi#method(0,'createCompatibleSampleModel(', 'int, int)', 'SampleModel'),
  \ javaapi#method(0,'isCompatibleSampleModel(', 'SampleModel)', 'boolean'),
  \ javaapi#method(0,'getAlphaRaster(', 'WritableRaster)', 'WritableRaster'),
  \ javaapi#method(0,'equals(', 'Object)', 'boolean'),
  \ ])

call javaapi#class('ConvolveOp', 'RasterOp', [
  \ javaapi#field(1,'EDGE_ZERO_FILL', 'int'),
  \ javaapi#field(1,'EDGE_NO_OP', 'int'),
  \ javaapi#method(0,'ConvolveOp(', 'Kernel, int, RenderingHints)', 'public'),
  \ javaapi#method(0,'ConvolveOp(', 'Kernel)', 'public'),
  \ javaapi#method(0,'getEdgeCondition(', ')', 'int'),
  \ javaapi#method(0,'getKernel(', ')', 'Kernel'),
  \ javaapi#method(0,'filter(', 'BufferedImage, BufferedImage)', 'BufferedImage'),
  \ javaapi#method(0,'filter(', 'Raster, WritableRaster)', 'WritableRaster'),
  \ javaapi#method(0,'createCompatibleDestImage(', 'BufferedImage, ColorModel)', 'BufferedImage'),
  \ javaapi#method(0,'createCompatibleDestRaster(', 'Raster)', 'WritableRaster'),
  \ javaapi#method(0,'getBounds2D(', 'BufferedImage)', 'Rectangle2D'),
  \ javaapi#method(0,'getBounds2D(', 'Raster)', 'Rectangle2D'),
  \ javaapi#method(0,'getPoint2D(', 'Point2D, Point2D)', 'Point2D'),
  \ javaapi#method(0,'getRenderingHints(', ')', 'RenderingHints'),
  \ ])

call javaapi#class('CropImageFilter', 'ImageFilter', [
  \ javaapi#method(0,'CropImageFilter(', 'int, int, int, int)', 'public'),
  \ javaapi#method(0,'setProperties(', 'Hashtable<?, ?>)', 'void'),
  \ javaapi#method(0,'setDimensions(', 'int, int)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, ColorModel, byte[], int, int)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, ColorModel, int[], int, int)', 'void'),
  \ ])

call javaapi#class('1', 'DataStealer', [
  \ javaapi#method(0,'getData(', 'DataBufferByte, int)', 'byte[]'),
  \ javaapi#method(0,'getData(', 'DataBufferUShort, int)', 'short[]'),
  \ javaapi#method(0,'getData(', 'DataBufferInt, int)', 'int[]'),
  \ javaapi#method(0,'getTrackable(', 'DataBuffer)', 'StateTrackableDelegate'),
  \ javaapi#method(0,'setTrackable(', 'DataBuffer, StateTrackableDelegate)', 'void'),
  \ ])

call javaapi#class('DataBufferDouble', 'DataBuffer', [
  \ javaapi#method(0,'DataBufferDouble(', 'int)', 'public'),
  \ javaapi#method(0,'DataBufferDouble(', 'int, int)', 'public'),
  \ javaapi#method(0,'DataBufferDouble(', 'double[], int)', 'public'),
  \ javaapi#method(0,'DataBufferDouble(', 'double[], int, int)', 'public'),
  \ javaapi#method(0,'DataBufferDouble(', 'double[][], int)', 'public'),
  \ javaapi#method(0,'DataBufferDouble(', 'double[][], int, int[])', 'public'),
  \ javaapi#method(0,'getData(', ')', 'double[]'),
  \ javaapi#method(0,'getData(', 'int)', 'double[]'),
  \ javaapi#method(0,'getBankData(', ')', 'double[][]'),
  \ javaapi#method(0,'getElem(', 'int)', 'int'),
  \ javaapi#method(0,'getElem(', 'int, int)', 'int'),
  \ javaapi#method(0,'setElem(', 'int, int)', 'void'),
  \ javaapi#method(0,'setElem(', 'int, int, int)', 'void'),
  \ javaapi#method(0,'getElemFloat(', 'int)', 'float'),
  \ javaapi#method(0,'getElemFloat(', 'int, int)', 'float'),
  \ javaapi#method(0,'setElemFloat(', 'int, float)', 'void'),
  \ javaapi#method(0,'setElemFloat(', 'int, int, float)', 'void'),
  \ javaapi#method(0,'getElemDouble(', 'int)', 'double'),
  \ javaapi#method(0,'getElemDouble(', 'int, int)', 'double'),
  \ javaapi#method(0,'setElemDouble(', 'int, double)', 'void'),
  \ javaapi#method(0,'setElemDouble(', 'int, int, double)', 'void'),
  \ ])

call javaapi#class('DataBufferFloat', 'DataBuffer', [
  \ javaapi#method(0,'DataBufferFloat(', 'int)', 'public'),
  \ javaapi#method(0,'DataBufferFloat(', 'int, int)', 'public'),
  \ javaapi#method(0,'DataBufferFloat(', 'float[], int)', 'public'),
  \ javaapi#method(0,'DataBufferFloat(', 'float[], int, int)', 'public'),
  \ javaapi#method(0,'DataBufferFloat(', 'float[][], int)', 'public'),
  \ javaapi#method(0,'DataBufferFloat(', 'float[][], int, int[])', 'public'),
  \ javaapi#method(0,'getData(', ')', 'float[]'),
  \ javaapi#method(0,'getData(', 'int)', 'float[]'),
  \ javaapi#method(0,'getBankData(', ')', 'float[][]'),
  \ javaapi#method(0,'getElem(', 'int)', 'int'),
  \ javaapi#method(0,'getElem(', 'int, int)', 'int'),
  \ javaapi#method(0,'setElem(', 'int, int)', 'void'),
  \ javaapi#method(0,'setElem(', 'int, int, int)', 'void'),
  \ javaapi#method(0,'getElemFloat(', 'int)', 'float'),
  \ javaapi#method(0,'getElemFloat(', 'int, int)', 'float'),
  \ javaapi#method(0,'setElemFloat(', 'int, float)', 'void'),
  \ javaapi#method(0,'setElemFloat(', 'int, int, float)', 'void'),
  \ javaapi#method(0,'getElemDouble(', 'int)', 'double'),
  \ javaapi#method(0,'getElemDouble(', 'int, int)', 'double'),
  \ javaapi#method(0,'setElemDouble(', 'int, double)', 'void'),
  \ javaapi#method(0,'setElemDouble(', 'int, int, double)', 'void'),
  \ ])

call javaapi#class('DataBufferShort', 'DataBuffer', [
  \ javaapi#method(0,'DataBufferShort(', 'int)', 'public'),
  \ javaapi#method(0,'DataBufferShort(', 'int, int)', 'public'),
  \ javaapi#method(0,'DataBufferShort(', 'short[], int)', 'public'),
  \ javaapi#method(0,'DataBufferShort(', 'short[], int, int)', 'public'),
  \ javaapi#method(0,'DataBufferShort(', 'short[][], int)', 'public'),
  \ javaapi#method(0,'DataBufferShort(', 'short[][], int, int[])', 'public'),
  \ javaapi#method(0,'getData(', ')', 'short[]'),
  \ javaapi#method(0,'getData(', 'int)', 'short[]'),
  \ javaapi#method(0,'getBankData(', ')', 'short[][]'),
  \ javaapi#method(0,'getElem(', 'int)', 'int'),
  \ javaapi#method(0,'getElem(', 'int, int)', 'int'),
  \ javaapi#method(0,'setElem(', 'int, int)', 'void'),
  \ javaapi#method(0,'setElem(', 'int, int, int)', 'void'),
  \ ])

call javaapi#class('DataBufferUShort', 'DataBuffer', [
  \ javaapi#method(0,'DataBufferUShort(', 'int)', 'public'),
  \ javaapi#method(0,'DataBufferUShort(', 'int, int)', 'public'),
  \ javaapi#method(0,'DataBufferUShort(', 'short[], int)', 'public'),
  \ javaapi#method(0,'DataBufferUShort(', 'short[], int, int)', 'public'),
  \ javaapi#method(0,'DataBufferUShort(', 'short[][], int)', 'public'),
  \ javaapi#method(0,'DataBufferUShort(', 'short[][], int, int[])', 'public'),
  \ javaapi#method(0,'getData(', ')', 'short[]'),
  \ javaapi#method(0,'getData(', 'int)', 'short[]'),
  \ javaapi#method(0,'getBankData(', ')', 'short[][]'),
  \ javaapi#method(0,'getElem(', 'int)', 'int'),
  \ javaapi#method(0,'getElem(', 'int, int)', 'int'),
  \ javaapi#method(0,'setElem(', 'int, int)', 'void'),
  \ javaapi#method(0,'setElem(', 'int, int, int)', 'void'),
  \ ])

call javaapi#class('ImagingOpException', 'RuntimeException', [
  \ javaapi#method(0,'ImagingOpException(', 'String)', 'public'),
  \ ])

call javaapi#class('Kernel', 'Cloneable', [
  \ javaapi#method(0,'Kernel(', 'int, int, float[])', 'public'),
  \ javaapi#method(0,'getXOrigin(', ')', 'int'),
  \ javaapi#method(0,'getYOrigin(', ')', 'int'),
  \ javaapi#method(0,'getWidth(', ')', 'int'),
  \ javaapi#method(0,'getHeight(', ')', 'int'),
  \ javaapi#method(0,'getKernelData(', 'float[])', 'float[]'),
  \ javaapi#method(0,'clone(', ')', 'Object'),
  \ ])

call javaapi#class('LookupOp', 'RasterOp', [
  \ javaapi#method(0,'LookupOp(', 'LookupTable, RenderingHints)', 'public'),
  \ javaapi#method(0,'getTable(', ')', 'LookupTable'),
  \ javaapi#method(0,'filter(', 'BufferedImage, BufferedImage)', 'BufferedImage'),
  \ javaapi#method(0,'filter(', 'Raster, WritableRaster)', 'WritableRaster'),
  \ javaapi#method(0,'getBounds2D(', 'BufferedImage)', 'Rectangle2D'),
  \ javaapi#method(0,'getBounds2D(', 'Raster)', 'Rectangle2D'),
  \ javaapi#method(0,'createCompatibleDestImage(', 'BufferedImage, ColorModel)', 'BufferedImage'),
  \ javaapi#method(0,'createCompatibleDestRaster(', 'Raster)', 'WritableRaster'),
  \ javaapi#method(0,'getPoint2D(', 'Point2D, Point2D)', 'Point2D'),
  \ javaapi#method(0,'getRenderingHints(', ')', 'RenderingHints'),
  \ ])

call javaapi#class('LookupTable', '', [
  \ javaapi#method(0,'getNumComponents(', ')', 'int'),
  \ javaapi#method(0,'getOffset(', ')', 'int'),
  \ javaapi#method(0,'lookupPixel(', 'int[], int[])', 'int[]'),
  \ ])

call javaapi#class('MemoryImageSource', 'ImageProducer', [
  \ javaapi#method(0,'MemoryImageSource(', 'int, int, ColorModel, byte[], int, int)', 'public'),
  \ javaapi#method(0,'MemoryImageSource(', 'int, int, ColorModel, byte[], int, int, Hashtable<?, ?>)', 'public'),
  \ javaapi#method(0,'MemoryImageSource(', 'int, int, ColorModel, int[], int, int)', 'public'),
  \ javaapi#method(0,'MemoryImageSource(', 'int, int, ColorModel, int[], int, int, Hashtable<?, ?>)', 'public'),
  \ javaapi#method(0,'MemoryImageSource(', 'int, int, int[], int, int)', 'public'),
  \ javaapi#method(0,'MemoryImageSource(', 'int, int, int[], int, int, Hashtable<?, ?>)', 'public'),
  \ javaapi#method(0,'addConsumer(', 'ImageConsumer)', 'void'),
  \ javaapi#method(0,'isConsumer(', 'ImageConsumer)', 'boolean'),
  \ javaapi#method(0,'removeConsumer(', 'ImageConsumer)', 'void'),
  \ javaapi#method(0,'startProduction(', 'ImageConsumer)', 'void'),
  \ javaapi#method(0,'requestTopDownLeftRightResend(', 'ImageConsumer)', 'void'),
  \ javaapi#method(0,'setAnimated(', 'boolean)', 'void'),
  \ javaapi#method(0,'setFullBufferUpdates(', 'boolean)', 'void'),
  \ javaapi#method(0,'newPixels(', ')', 'void'),
  \ javaapi#method(0,'newPixels(', 'int, int, int, int)', 'void'),
  \ javaapi#method(0,'newPixels(', 'int, int, int, int, boolean)', 'void'),
  \ javaapi#method(0,'newPixels(', 'byte[], ColorModel, int, int)', 'void'),
  \ javaapi#method(0,'newPixels(', 'int[], ColorModel, int, int)', 'void'),
  \ ])

call javaapi#class('MultiPixelPackedSampleModel', 'SampleModel', [
  \ javaapi#method(0,'MultiPixelPackedSampleModel(', 'int, int, int, int)', 'public'),
  \ javaapi#method(0,'MultiPixelPackedSampleModel(', 'int, int, int, int, int, int)', 'public'),
  \ javaapi#method(0,'createCompatibleSampleModel(', 'int, int)', 'SampleModel'),
  \ javaapi#method(0,'createDataBuffer(', ')', 'DataBuffer'),
  \ javaapi#method(0,'getNumDataElements(', ')', 'int'),
  \ javaapi#method(0,'getSampleSize(', ')', 'int[]'),
  \ javaapi#method(0,'getSampleSize(', 'int)', 'int'),
  \ javaapi#method(0,'getOffset(', 'int, int)', 'int'),
  \ javaapi#method(0,'getBitOffset(', 'int)', 'int'),
  \ javaapi#method(0,'getScanlineStride(', ')', 'int'),
  \ javaapi#method(0,'getPixelBitStride(', ')', 'int'),
  \ javaapi#method(0,'getDataBitOffset(', ')', 'int'),
  \ javaapi#method(0,'getTransferType(', ')', 'int'),
  \ javaapi#method(0,'createSubsetSampleModel(', 'int[])', 'SampleModel'),
  \ javaapi#method(0,'getSample(', 'int, int, int, DataBuffer)', 'int'),
  \ javaapi#method(0,'setSample(', 'int, int, int, int, DataBuffer)', 'void'),
  \ javaapi#method(0,'getDataElements(', 'int, int, Object, DataBuffer)', 'Object'),
  \ javaapi#method(0,'getPixel(', 'int, int, int[], DataBuffer)', 'int[]'),
  \ javaapi#method(0,'setDataElements(', 'int, int, Object, DataBuffer)', 'void'),
  \ javaapi#method(0,'setPixel(', 'int, int, int[], DataBuffer)', 'void'),
  \ javaapi#method(0,'equals(', 'Object)', 'boolean'),
  \ javaapi#method(0,'hashCode(', ')', 'int'),
  \ ])

call javaapi#class('PixelGrabber', 'ImageConsumer', [
  \ javaapi#method(0,'PixelGrabber(', 'Image, int, int, int, int, int[], int, int)', 'public'),
  \ javaapi#method(0,'PixelGrabber(', 'ImageProducer, int, int, int, int, int[], int, int)', 'public'),
  \ javaapi#method(0,'PixelGrabber(', 'Image, int, int, int, int, boolean)', 'public'),
  \ javaapi#method(0,'startGrabbing(', ')', 'void'),
  \ javaapi#method(0,'abortGrabbing(', ')', 'void'),
  \ javaapi#method(0,'grabPixels(', ') throws InterruptedException', 'boolean'),
  \ javaapi#method(0,'grabPixels(', 'long) throws InterruptedException', 'boolean'),
  \ javaapi#method(0,'getStatus(', ')', 'int'),
  \ javaapi#method(0,'getWidth(', ')', 'int'),
  \ javaapi#method(0,'getHeight(', ')', 'int'),
  \ javaapi#method(0,'getPixels(', ')', 'Object'),
  \ javaapi#method(0,'getColorModel(', ')', 'ColorModel'),
  \ javaapi#method(0,'setDimensions(', 'int, int)', 'void'),
  \ javaapi#method(0,'setHints(', 'int)', 'void'),
  \ javaapi#method(0,'setProperties(', 'Hashtable<?, ?>)', 'void'),
  \ javaapi#method(0,'setColorModel(', 'ColorModel)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, ColorModel, byte[], int, int)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, ColorModel, int[], int, int)', 'void'),
  \ javaapi#method(0,'imageComplete(', 'int)', 'void'),
  \ javaapi#method(0,'status(', ')', 'int'),
  \ ])

call javaapi#class('RasterFormatException', 'RuntimeException', [
  \ javaapi#method(0,'RasterFormatException(', 'String)', 'public'),
  \ ])

call javaapi#interface('RasterOp', '', [
  \ javaapi#method(0,'filter(', 'Raster, WritableRaster)', 'WritableRaster'),
  \ javaapi#method(0,'getBounds2D(', 'Raster)', 'Rectangle2D'),
  \ javaapi#method(0,'createCompatibleDestRaster(', 'Raster)', 'WritableRaster'),
  \ javaapi#method(0,'getPoint2D(', 'Point2D, Point2D)', 'Point2D'),
  \ javaapi#method(0,'getRenderingHints(', ')', 'RenderingHints'),
  \ ])

call javaapi#class('ReplicateScaleFilter', 'ImageFilter', [
  \ javaapi#method(0,'ReplicateScaleFilter(', 'int, int)', 'public'),
  \ javaapi#method(0,'setProperties(', 'Hashtable<?, ?>)', 'void'),
  \ javaapi#method(0,'setDimensions(', 'int, int)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, ColorModel, byte[], int, int)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, ColorModel, int[], int, int)', 'void'),
  \ ])

call javaapi#class('RescaleOp', 'RasterOp', [
  \ javaapi#method(0,'RescaleOp(', 'float[], float[], RenderingHints)', 'public'),
  \ javaapi#method(0,'RescaleOp(', 'float, float, RenderingHints)', 'public'),
  \ javaapi#method(0,'getScaleFactors(', 'float[])', 'float[]'),
  \ javaapi#method(0,'getOffsets(', 'float[])', 'float[]'),
  \ javaapi#method(0,'getNumFactors(', ')', 'int'),
  \ javaapi#method(0,'filter(', 'BufferedImage, BufferedImage)', 'BufferedImage'),
  \ javaapi#method(0,'filter(', 'Raster, WritableRaster)', 'WritableRaster'),
  \ javaapi#method(0,'getBounds2D(', 'BufferedImage)', 'Rectangle2D'),
  \ javaapi#method(0,'getBounds2D(', 'Raster)', 'Rectangle2D'),
  \ javaapi#method(0,'createCompatibleDestImage(', 'BufferedImage, ColorModel)', 'BufferedImage'),
  \ javaapi#method(0,'createCompatibleDestRaster(', 'Raster)', 'WritableRaster'),
  \ javaapi#method(0,'getPoint2D(', 'Point2D, Point2D)', 'Point2D'),
  \ javaapi#method(0,'getRenderingHints(', ')', 'RenderingHints'),
  \ ])

call javaapi#class('ShortLookupTable', 'LookupTable', [
  \ javaapi#method(0,'ShortLookupTable(', 'int, short[][])', 'public'),
  \ javaapi#method(0,'ShortLookupTable(', 'int, short[])', 'public'),
  \ javaapi#method(0,'getTable(', ')', 'short[][]'),
  \ javaapi#method(0,'lookupPixel(', 'int[], int[])', 'int[]'),
  \ javaapi#method(0,'lookupPixel(', 'short[], short[])', 'short[]'),
  \ ])

call javaapi#interface('TileObserver', '', [
  \ javaapi#method(0,'tileUpdate(', 'WritableRenderedImage, int, int, boolean)', 'void'),
  \ ])

call javaapi#namespace('java.awt.image')

call javaapi#class('FilteredImageSource', 'ImageProducer', [
  \ javaapi#method(0,'FilteredImageSource(', 'ImageProducer, ImageFilter)', 'public'),
  \ javaapi#method(0,'addConsumer(', 'ImageConsumer)', 'void'),
  \ javaapi#method(0,'isConsumer(', 'ImageConsumer)', 'boolean'),
  \ javaapi#method(0,'removeConsumer(', 'ImageConsumer)', 'void'),
  \ javaapi#method(0,'startProduction(', 'ImageConsumer)', 'void'),
  \ javaapi#method(0,'requestTopDownLeftRightResend(', 'ImageConsumer)', 'void'),
  \ ])

call javaapi#class('ImageFilter', 'Cloneable', [
  \ javaapi#method(0,'ImageFilter(', ')', 'public'),
  \ javaapi#method(0,'getFilterInstance(', 'ImageConsumer)', 'ImageFilter'),
  \ javaapi#method(0,'setDimensions(', 'int, int)', 'void'),
  \ javaapi#method(0,'setProperties(', 'Hashtable<?, ?>)', 'void'),
  \ javaapi#method(0,'setColorModel(', 'ColorModel)', 'void'),
  \ javaapi#method(0,'setHints(', 'int)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, ColorModel, byte[], int, int)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, ColorModel, int[], int, int)', 'void'),
  \ javaapi#method(0,'imageComplete(', 'int)', 'void'),
  \ javaapi#method(0,'resendTopDownLeftRight(', 'ImageProducer)', 'void'),
  \ javaapi#method(0,'clone(', ')', 'Object'),
  \ ])

call javaapi#class('RGBImageFilter', 'ImageFilter', [
  \ javaapi#method(0,'RGBImageFilter(', ')', 'public'),
  \ javaapi#method(0,'setColorModel(', 'ColorModel)', 'void'),
  \ javaapi#method(0,'substituteColorModel(', 'ColorModel, ColorModel)', 'void'),
  \ javaapi#method(0,'filterIndexColorModel(', 'IndexColorModel)', 'IndexColorModel'),
  \ javaapi#method(0,'filterRGBPixels(', 'int, int, int, int, int[], int, int)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, ColorModel, byte[], int, int)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, ColorModel, int[], int, int)', 'void'),
  \ javaapi#method(0,'filterRGB(', 'int, int, int)', 'int'),
  \ ])

call javaapi#namespace('java.awt.image')

call javaapi#class('SinglePixelPackedSampleModel', 'SampleModel', [
  \ javaapi#method(0,'SinglePixelPackedSampleModel(', 'int, int, int, int[])', 'public'),
  \ javaapi#method(0,'SinglePixelPackedSampleModel(', 'int, int, int, int, int[])', 'public'),
  \ javaapi#method(0,'getNumDataElements(', ')', 'int'),
  \ javaapi#method(0,'createCompatibleSampleModel(', 'int, int)', 'SampleModel'),
  \ javaapi#method(0,'createDataBuffer(', ')', 'DataBuffer'),
  \ javaapi#method(0,'getSampleSize(', ')', 'int[]'),
  \ javaapi#method(0,'getSampleSize(', 'int)', 'int'),
  \ javaapi#method(0,'getOffset(', 'int, int)', 'int'),
  \ javaapi#method(0,'getBitOffsets(', ')', 'int[]'),
  \ javaapi#method(0,'getBitMasks(', ')', 'int[]'),
  \ javaapi#method(0,'getScanlineStride(', ')', 'int'),
  \ javaapi#method(0,'createSubsetSampleModel(', 'int[])', 'SampleModel'),
  \ javaapi#method(0,'getDataElements(', 'int, int, Object, DataBuffer)', 'Object'),
  \ javaapi#method(0,'getPixel(', 'int, int, int[], DataBuffer)', 'int[]'),
  \ javaapi#method(0,'getPixels(', 'int, int, int, int, int[], DataBuffer)', 'int[]'),
  \ javaapi#method(0,'getSample(', 'int, int, int, DataBuffer)', 'int'),
  \ javaapi#method(0,'getSamples(', 'int, int, int, int, int, int[], DataBuffer)', 'int[]'),
  \ javaapi#method(0,'setDataElements(', 'int, int, Object, DataBuffer)', 'void'),
  \ javaapi#method(0,'setPixel(', 'int, int, int[], DataBuffer)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, int[], DataBuffer)', 'void'),
  \ javaapi#method(0,'setSample(', 'int, int, int, int, DataBuffer)', 'void'),
  \ javaapi#method(0,'setSamples(', 'int, int, int, int, int, int[], DataBuffer)', 'void'),
  \ javaapi#method(0,'equals(', 'Object)', 'boolean'),
  \ javaapi#method(0,'hashCode(', ')', 'int'),
  \ ])

call javaapi#class('DataBufferInt', 'DataBuffer', [
  \ javaapi#method(0,'DataBufferInt(', 'int)', 'public'),
  \ javaapi#method(0,'DataBufferInt(', 'int, int)', 'public'),
  \ javaapi#method(0,'DataBufferInt(', 'int[], int)', 'public'),
  \ javaapi#method(0,'DataBufferInt(', 'int[], int, int)', 'public'),
  \ javaapi#method(0,'DataBufferInt(', 'int[][], int)', 'public'),
  \ javaapi#method(0,'DataBufferInt(', 'int[][], int, int[])', 'public'),
  \ javaapi#method(0,'getData(', ')', 'int[]'),
  \ javaapi#method(0,'getData(', 'int)', 'int[]'),
  \ javaapi#method(0,'getBankData(', ')', 'int[][]'),
  \ javaapi#method(0,'getElem(', 'int)', 'int'),
  \ javaapi#method(0,'getElem(', 'int, int)', 'int'),
  \ javaapi#method(0,'setElem(', 'int, int)', 'void'),
  \ javaapi#method(0,'setElem(', 'int, int, int)', 'void'),
  \ ])

call javaapi#namespace('java.awt.image')

call javaapi#interface('RenderedImage', '', [
  \ javaapi#method(0,'getSources(', ')', 'RenderedImage>'),
  \ javaapi#method(0,'getProperty(', 'String)', 'Object'),
  \ javaapi#method(0,'getPropertyNames(', ')', 'String[]'),
  \ javaapi#method(0,'getColorModel(', ')', 'ColorModel'),
  \ javaapi#method(0,'getSampleModel(', ')', 'SampleModel'),
  \ javaapi#method(0,'getWidth(', ')', 'int'),
  \ javaapi#method(0,'getHeight(', ')', 'int'),
  \ javaapi#method(0,'getMinX(', ')', 'int'),
  \ javaapi#method(0,'getMinY(', ')', 'int'),
  \ javaapi#method(0,'getNumXTiles(', ')', 'int'),
  \ javaapi#method(0,'getNumYTiles(', ')', 'int'),
  \ javaapi#method(0,'getMinTileX(', ')', 'int'),
  \ javaapi#method(0,'getMinTileY(', ')', 'int'),
  \ javaapi#method(0,'getTileWidth(', ')', 'int'),
  \ javaapi#method(0,'getTileHeight(', ')', 'int'),
  \ javaapi#method(0,'getTileGridXOffset(', ')', 'int'),
  \ javaapi#method(0,'getTileGridYOffset(', ')', 'int'),
  \ javaapi#method(0,'getTile(', 'int, int)', 'Raster'),
  \ javaapi#method(0,'getData(', ')', 'Raster'),
  \ javaapi#method(0,'getData(', 'Rectangle)', 'Raster'),
  \ javaapi#method(0,'copyData(', 'WritableRaster)', 'WritableRaster'),
  \ ])

call javaapi#interface('WritableRenderedImage', 'RenderedImage', [
  \ javaapi#method(0,'addTileObserver(', 'TileObserver)', 'void'),
  \ javaapi#method(0,'removeTileObserver(', 'TileObserver)', 'void'),
  \ javaapi#method(0,'getWritableTile(', 'int, int)', 'WritableRaster'),
  \ javaapi#method(0,'releaseWritableTile(', 'int, int)', 'void'),
  \ javaapi#method(0,'isTileWritable(', 'int, int)', 'boolean'),
  \ javaapi#method(0,'getWritableTileIndices(', ')', 'Point[]'),
  \ javaapi#method(0,'hasTileWriters(', ')', 'boolean'),
  \ javaapi#method(0,'setData(', 'Raster)', 'void'),
  \ ])

call javaapi#class('BufferedImage', 'Image', [
  \ javaapi#field(1,'TYPE_CUSTOM', 'int'),
  \ javaapi#field(1,'TYPE_INT_RGB', 'int'),
  \ javaapi#field(1,'TYPE_INT_ARGB', 'int'),
  \ javaapi#field(1,'TYPE_INT_ARGB_PRE', 'int'),
  \ javaapi#field(1,'TYPE_INT_BGR', 'int'),
  \ javaapi#field(1,'TYPE_3BYTE_BGR', 'int'),
  \ javaapi#field(1,'TYPE_4BYTE_ABGR', 'int'),
  \ javaapi#field(1,'TYPE_4BYTE_ABGR_PRE', 'int'),
  \ javaapi#field(1,'TYPE_USHORT_565_RGB', 'int'),
  \ javaapi#field(1,'TYPE_USHORT_555_RGB', 'int'),
  \ javaapi#field(1,'TYPE_BYTE_GRAY', 'int'),
  \ javaapi#field(1,'TYPE_USHORT_GRAY', 'int'),
  \ javaapi#field(1,'TYPE_BYTE_BINARY', 'int'),
  \ javaapi#field(1,'TYPE_BYTE_INDEXED', 'int'),
  \ javaapi#method(0,'BufferedImage(', 'int, int, int)', 'public'),
  \ javaapi#method(0,'BufferedImage(', 'int, int, int, IndexColorModel)', 'public'),
  \ javaapi#method(0,'BufferedImage(', 'ColorModel, WritableRaster, boolean, Hashtable<?, ?>)', 'public'),
  \ javaapi#method(0,'getType(', ')', 'int'),
  \ javaapi#method(0,'getColorModel(', ')', 'ColorModel'),
  \ javaapi#method(0,'getRaster(', ')', 'WritableRaster'),
  \ javaapi#method(0,'getAlphaRaster(', ')', 'WritableRaster'),
  \ javaapi#method(0,'getRGB(', 'int, int)', 'int'),
  \ javaapi#method(0,'getRGB(', 'int, int, int, int, int[], int, int)', 'int[]'),
  \ javaapi#method(0,'setRGB(', 'int, int, int)', 'void'),
  \ javaapi#method(0,'setRGB(', 'int, int, int, int, int[], int, int)', 'void'),
  \ javaapi#method(0,'getWidth(', ')', 'int'),
  \ javaapi#method(0,'getHeight(', ')', 'int'),
  \ javaapi#method(0,'getWidth(', 'ImageObserver)', 'int'),
  \ javaapi#method(0,'getHeight(', 'ImageObserver)', 'int'),
  \ javaapi#method(0,'getSource(', ')', 'ImageProducer'),
  \ javaapi#method(0,'getProperty(', 'String, ImageObserver)', 'Object'),
  \ javaapi#method(0,'getProperty(', 'String)', 'Object'),
  \ javaapi#method(0,'getGraphics(', ')', 'Graphics'),
  \ javaapi#method(0,'createGraphics(', ')', 'Graphics2D'),
  \ javaapi#method(0,'getSubimage(', 'int, int, int, int)', 'BufferedImage'),
  \ javaapi#method(0,'isAlphaPremultiplied(', ')', 'boolean'),
  \ javaapi#method(0,'coerceData(', 'boolean)', 'void'),
  \ javaapi#method(0,'toString(', ')', 'String'),
  \ javaapi#method(0,'getSources(', ')', 'RenderedImage>'),
  \ javaapi#method(0,'getPropertyNames(', ')', 'String[]'),
  \ javaapi#method(0,'getMinX(', ')', 'int'),
  \ javaapi#method(0,'getMinY(', ')', 'int'),
  \ javaapi#method(0,'getSampleModel(', ')', 'SampleModel'),
  \ javaapi#method(0,'getNumXTiles(', ')', 'int'),
  \ javaapi#method(0,'getNumYTiles(', ')', 'int'),
  \ javaapi#method(0,'getMinTileX(', ')', 'int'),
  \ javaapi#method(0,'getMinTileY(', ')', 'int'),
  \ javaapi#method(0,'getTileWidth(', ')', 'int'),
  \ javaapi#method(0,'getTileHeight(', ')', 'int'),
  \ javaapi#method(0,'getTileGridXOffset(', ')', 'int'),
  \ javaapi#method(0,'getTileGridYOffset(', ')', 'int'),
  \ javaapi#method(0,'getTile(', 'int, int)', 'Raster'),
  \ javaapi#method(0,'getData(', ')', 'Raster'),
  \ javaapi#method(0,'getData(', 'Rectangle)', 'Raster'),
  \ javaapi#method(0,'copyData(', 'WritableRaster)', 'WritableRaster'),
  \ javaapi#method(0,'setData(', 'Raster)', 'void'),
  \ javaapi#method(0,'addTileObserver(', 'TileObserver)', 'void'),
  \ javaapi#method(0,'removeTileObserver(', 'TileObserver)', 'void'),
  \ javaapi#method(0,'isTileWritable(', 'int, int)', 'boolean'),
  \ javaapi#method(0,'getWritableTileIndices(', ')', 'Point[]'),
  \ javaapi#method(0,'hasTileWriters(', ')', 'boolean'),
  \ javaapi#method(0,'getWritableTile(', 'int, int)', 'WritableRaster'),
  \ javaapi#method(0,'releaseWritableTile(', 'int, int)', 'void'),
  \ javaapi#method(0,'getTransparency(', ')', 'int'),
  \ ])

call javaapi#class('WritableRaster', 'Raster', [
  \ javaapi#method(0,'getWritableParent(', ')', 'WritableRaster'),
  \ javaapi#method(0,'createWritableTranslatedChild(', 'int, int)', 'WritableRaster'),
  \ javaapi#method(0,'createWritableChild(', 'int, int, int, int, int, int, int[])', 'WritableRaster'),
  \ javaapi#method(0,'setDataElements(', 'int, int, Object)', 'void'),
  \ javaapi#method(0,'setDataElements(', 'int, int, Raster)', 'void'),
  \ javaapi#method(0,'setDataElements(', 'int, int, int, int, Object)', 'void'),
  \ javaapi#method(0,'setRect(', 'Raster)', 'void'),
  \ javaapi#method(0,'setRect(', 'int, int, Raster)', 'void'),
  \ javaapi#method(0,'setPixel(', 'int, int, int[])', 'void'),
  \ javaapi#method(0,'setPixel(', 'int, int, float[])', 'void'),
  \ javaapi#method(0,'setPixel(', 'int, int, double[])', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, int[])', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, float[])', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, double[])', 'void'),
  \ javaapi#method(0,'setSample(', 'int, int, int, int)', 'void'),
  \ javaapi#method(0,'setSample(', 'int, int, int, float)', 'void'),
  \ javaapi#method(0,'setSample(', 'int, int, int, double)', 'void'),
  \ javaapi#method(0,'setSamples(', 'int, int, int, int, int, int[])', 'void'),
  \ javaapi#method(0,'setSamples(', 'int, int, int, int, int, float[])', 'void'),
  \ javaapi#method(0,'setSamples(', 'int, int, int, int, int, double[])', 'void'),
  \ ])

call javaapi#namespace('java.awt.image')

call javaapi#class('SampleModel', '', [
  \ javaapi#method(0,'SampleModel(', 'int, int, int, int)', 'public'),
  \ javaapi#method(0,'getWidth(', ')', 'int'),
  \ javaapi#method(0,'getHeight(', ')', 'int'),
  \ javaapi#method(0,'getNumBands(', ')', 'int'),
  \ javaapi#method(0,'getNumDataElements(', ')', 'int'),
  \ javaapi#method(0,'getDataType(', ')', 'int'),
  \ javaapi#method(0,'getTransferType(', ')', 'int'),
  \ javaapi#method(0,'getPixel(', 'int, int, int[], DataBuffer)', 'int[]'),
  \ javaapi#method(0,'getDataElements(', 'int, int, Object, DataBuffer)', 'Object'),
  \ javaapi#method(0,'getDataElements(', 'int, int, int, int, Object, DataBuffer)', 'Object'),
  \ javaapi#method(0,'setDataElements(', 'int, int, Object, DataBuffer)', 'void'),
  \ javaapi#method(0,'setDataElements(', 'int, int, int, int, Object, DataBuffer)', 'void'),
  \ javaapi#method(0,'getPixel(', 'int, int, float[], DataBuffer)', 'float[]'),
  \ javaapi#method(0,'getPixel(', 'int, int, double[], DataBuffer)', 'double[]'),
  \ javaapi#method(0,'getPixels(', 'int, int, int, int, int[], DataBuffer)', 'int[]'),
  \ javaapi#method(0,'getPixels(', 'int, int, int, int, float[], DataBuffer)', 'float[]'),
  \ javaapi#method(0,'getPixels(', 'int, int, int, int, double[], DataBuffer)', 'double[]'),
  \ javaapi#method(0,'getSample(', 'int, int, int, DataBuffer)', 'int'),
  \ javaapi#method(0,'getSampleFloat(', 'int, int, int, DataBuffer)', 'float'),
  \ javaapi#method(0,'getSampleDouble(', 'int, int, int, DataBuffer)', 'double'),
  \ javaapi#method(0,'getSamples(', 'int, int, int, int, int, int[], DataBuffer)', 'int[]'),
  \ javaapi#method(0,'getSamples(', 'int, int, int, int, int, float[], DataBuffer)', 'float[]'),
  \ javaapi#method(0,'getSamples(', 'int, int, int, int, int, double[], DataBuffer)', 'double[]'),
  \ javaapi#method(0,'setPixel(', 'int, int, int[], DataBuffer)', 'void'),
  \ javaapi#method(0,'setPixel(', 'int, int, float[], DataBuffer)', 'void'),
  \ javaapi#method(0,'setPixel(', 'int, int, double[], DataBuffer)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, int[], DataBuffer)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, float[], DataBuffer)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, double[], DataBuffer)', 'void'),
  \ javaapi#method(0,'setSample(', 'int, int, int, int, DataBuffer)', 'void'),
  \ javaapi#method(0,'setSample(', 'int, int, int, float, DataBuffer)', 'void'),
  \ javaapi#method(0,'setSample(', 'int, int, int, double, DataBuffer)', 'void'),
  \ javaapi#method(0,'setSamples(', 'int, int, int, int, int, int[], DataBuffer)', 'void'),
  \ javaapi#method(0,'setSamples(', 'int, int, int, int, int, float[], DataBuffer)', 'void'),
  \ javaapi#method(0,'setSamples(', 'int, int, int, int, int, double[], DataBuffer)', 'void'),
  \ javaapi#method(0,'createCompatibleSampleModel(', 'int, int)', 'SampleModel'),
  \ javaapi#method(0,'createSubsetSampleModel(', 'int[])', 'SampleModel'),
  \ javaapi#method(0,'createDataBuffer(', ')', 'DataBuffer'),
  \ javaapi#method(0,'getSampleSize(', ')', 'int[]'),
  \ javaapi#method(0,'getSampleSize(', 'int)', 'int'),
  \ ])

call javaapi#class('ComponentSampleModel', 'SampleModel', [
  \ javaapi#method(0,'ComponentSampleModel(', 'int, int, int, int, int, int[])', 'public'),
  \ javaapi#method(0,'ComponentSampleModel(', 'int, int, int, int, int, int[], int[])', 'public'),
  \ javaapi#method(0,'createCompatibleSampleModel(', 'int, int)', 'SampleModel'),
  \ javaapi#method(0,'createSubsetSampleModel(', 'int[])', 'SampleModel'),
  \ javaapi#method(0,'createDataBuffer(', ')', 'DataBuffer'),
  \ javaapi#method(0,'getOffset(', 'int, int)', 'int'),
  \ javaapi#method(0,'getOffset(', 'int, int, int)', 'int'),
  \ javaapi#method(0,'getSampleSize(', ')', 'int[]'),
  \ javaapi#method(0,'getSampleSize(', 'int)', 'int'),
  \ javaapi#method(0,'getBankIndices(', ')', 'int[]'),
  \ javaapi#method(0,'getBandOffsets(', ')', 'int[]'),
  \ javaapi#method(0,'getScanlineStride(', ')', 'int'),
  \ javaapi#method(0,'getPixelStride(', ')', 'int'),
  \ javaapi#method(0,'getNumDataElements(', ')', 'int'),
  \ javaapi#method(0,'getDataElements(', 'int, int, Object, DataBuffer)', 'Object'),
  \ javaapi#method(0,'getPixel(', 'int, int, int[], DataBuffer)', 'int[]'),
  \ javaapi#method(0,'getPixels(', 'int, int, int, int, int[], DataBuffer)', 'int[]'),
  \ javaapi#method(0,'getSample(', 'int, int, int, DataBuffer)', 'int'),
  \ javaapi#method(0,'getSampleFloat(', 'int, int, int, DataBuffer)', 'float'),
  \ javaapi#method(0,'getSampleDouble(', 'int, int, int, DataBuffer)', 'double'),
  \ javaapi#method(0,'getSamples(', 'int, int, int, int, int, int[], DataBuffer)', 'int[]'),
  \ javaapi#method(0,'setDataElements(', 'int, int, Object, DataBuffer)', 'void'),
  \ javaapi#method(0,'setPixel(', 'int, int, int[], DataBuffer)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, int[], DataBuffer)', 'void'),
  \ javaapi#method(0,'setSample(', 'int, int, int, int, DataBuffer)', 'void'),
  \ javaapi#method(0,'setSample(', 'int, int, int, float, DataBuffer)', 'void'),
  \ javaapi#method(0,'setSample(', 'int, int, int, double, DataBuffer)', 'void'),
  \ javaapi#method(0,'setSamples(', 'int, int, int, int, int, int[], DataBuffer)', 'void'),
  \ javaapi#method(0,'equals(', 'Object)', 'boolean'),
  \ javaapi#method(0,'hashCode(', ')', 'int'),
  \ ])

call javaapi#class('PixelInterleavedSampleModel', 'ComponentSampleModel', [
  \ javaapi#method(0,'PixelInterleavedSampleModel(', 'int, int, int, int, int, int[])', 'public'),
  \ javaapi#method(0,'createCompatibleSampleModel(', 'int, int)', 'SampleModel'),
  \ javaapi#method(0,'createSubsetSampleModel(', 'int[])', 'SampleModel'),
  \ javaapi#method(0,'hashCode(', ')', 'int'),
  \ ])

call javaapi#class('DataBuffer', '', [
  \ javaapi#field(1,'TYPE_BYTE', 'int'),
  \ javaapi#field(1,'TYPE_USHORT', 'int'),
  \ javaapi#field(1,'TYPE_SHORT', 'int'),
  \ javaapi#field(1,'TYPE_INT', 'int'),
  \ javaapi#field(1,'TYPE_FLOAT', 'int'),
  \ javaapi#field(1,'TYPE_DOUBLE', 'int'),
  \ javaapi#field(1,'TYPE_UNDEFINED', 'int'),
  \ javaapi#method(1,'getDataTypeSize(', 'int)', 'int'),
  \ javaapi#method(0,'getDataType(', ')', 'int'),
  \ javaapi#method(0,'getSize(', ')', 'int'),
  \ javaapi#method(0,'getOffset(', ')', 'int'),
  \ javaapi#method(0,'getOffsets(', ')', 'int[]'),
  \ javaapi#method(0,'getNumBanks(', ')', 'int'),
  \ javaapi#method(0,'getElem(', 'int)', 'int'),
  \ javaapi#method(0,'getElem(', 'int, int)', 'int'),
  \ javaapi#method(0,'setElem(', 'int, int)', 'void'),
  \ javaapi#method(0,'setElem(', 'int, int, int)', 'void'),
  \ javaapi#method(0,'getElemFloat(', 'int)', 'float'),
  \ javaapi#method(0,'getElemFloat(', 'int, int)', 'float'),
  \ javaapi#method(0,'setElemFloat(', 'int, float)', 'void'),
  \ javaapi#method(0,'setElemFloat(', 'int, int, float)', 'void'),
  \ javaapi#method(0,'getElemDouble(', 'int)', 'double'),
  \ javaapi#method(0,'getElemDouble(', 'int, int)', 'double'),
  \ javaapi#method(0,'setElemDouble(', 'int, double)', 'void'),
  \ javaapi#method(0,'setElemDouble(', 'int, int, double)', 'void'),
  \ ])

call javaapi#class('DataBufferByte', 'DataBuffer', [
  \ javaapi#method(0,'DataBufferByte(', 'int)', 'public'),
  \ javaapi#method(0,'DataBufferByte(', 'int, int)', 'public'),
  \ javaapi#method(0,'DataBufferByte(', 'byte[], int)', 'public'),
  \ javaapi#method(0,'DataBufferByte(', 'byte[], int, int)', 'public'),
  \ javaapi#method(0,'DataBufferByte(', 'byte[][], int)', 'public'),
  \ javaapi#method(0,'DataBufferByte(', 'byte[][], int, int[])', 'public'),
  \ javaapi#method(0,'getData(', ')', 'byte[]'),
  \ javaapi#method(0,'getData(', 'int)', 'byte[]'),
  \ javaapi#method(0,'getBankData(', ')', 'byte[][]'),
  \ javaapi#method(0,'getElem(', 'int)', 'int'),
  \ javaapi#method(0,'getElem(', 'int, int)', 'int'),
  \ javaapi#method(0,'setElem(', 'int, int)', 'void'),
  \ javaapi#method(0,'setElem(', 'int, int, int)', 'void'),
  \ ])

call javaapi#class('Raster', '', [
  \ javaapi#method(1,'createInterleavedRaster(', 'int, int, int, int, Point)', 'WritableRaster'),
  \ javaapi#method(1,'createInterleavedRaster(', 'int, int, int, int, int, int[], Point)', 'WritableRaster'),
  \ javaapi#method(1,'createBandedRaster(', 'int, int, int, int, Point)', 'WritableRaster'),
  \ javaapi#method(1,'createBandedRaster(', 'int, int, int, int, int[], int[], Point)', 'WritableRaster'),
  \ javaapi#method(1,'createPackedRaster(', 'int, int, int, int[], Point)', 'WritableRaster'),
  \ javaapi#method(1,'createPackedRaster(', 'int, int, int, int, int, Point)', 'WritableRaster'),
  \ javaapi#method(1,'createInterleavedRaster(', 'DataBuffer, int, int, int, int, int[], Point)', 'WritableRaster'),
  \ javaapi#method(1,'createBandedRaster(', 'DataBuffer, int, int, int, int[], int[], Point)', 'WritableRaster'),
  \ javaapi#method(1,'createPackedRaster(', 'DataBuffer, int, int, int, int[], Point)', 'WritableRaster'),
  \ javaapi#method(1,'createPackedRaster(', 'DataBuffer, int, int, int, Point)', 'WritableRaster'),
  \ javaapi#method(1,'createRaster(', 'SampleModel, DataBuffer, Point)', 'Raster'),
  \ javaapi#method(1,'createWritableRaster(', 'SampleModel, Point)', 'WritableRaster'),
  \ javaapi#method(1,'createWritableRaster(', 'SampleModel, DataBuffer, Point)', 'WritableRaster'),
  \ javaapi#method(0,'getParent(', ')', 'Raster'),
  \ javaapi#method(0,'getSampleModelTranslateX(', ')', 'int'),
  \ javaapi#method(0,'getSampleModelTranslateY(', ')', 'int'),
  \ javaapi#method(0,'createCompatibleWritableRaster(', ')', 'WritableRaster'),
  \ javaapi#method(0,'createCompatibleWritableRaster(', 'int, int)', 'WritableRaster'),
  \ javaapi#method(0,'createCompatibleWritableRaster(', 'Rectangle)', 'WritableRaster'),
  \ javaapi#method(0,'createCompatibleWritableRaster(', 'int, int, int, int)', 'WritableRaster'),
  \ javaapi#method(0,'createTranslatedChild(', 'int, int)', 'Raster'),
  \ javaapi#method(0,'createChild(', 'int, int, int, int, int, int, int[])', 'Raster'),
  \ javaapi#method(0,'getBounds(', ')', 'Rectangle'),
  \ javaapi#method(0,'getMinX(', ')', 'int'),
  \ javaapi#method(0,'getMinY(', ')', 'int'),
  \ javaapi#method(0,'getWidth(', ')', 'int'),
  \ javaapi#method(0,'getHeight(', ')', 'int'),
  \ javaapi#method(0,'getNumBands(', ')', 'int'),
  \ javaapi#method(0,'getNumDataElements(', ')', 'int'),
  \ javaapi#method(0,'getTransferType(', ')', 'int'),
  \ javaapi#method(0,'getDataBuffer(', ')', 'DataBuffer'),
  \ javaapi#method(0,'getSampleModel(', ')', 'SampleModel'),
  \ javaapi#method(0,'getDataElements(', 'int, int, Object)', 'Object'),
  \ javaapi#method(0,'getDataElements(', 'int, int, int, int, Object)', 'Object'),
  \ javaapi#method(0,'getPixel(', 'int, int, int[])', 'int[]'),
  \ javaapi#method(0,'getPixel(', 'int, int, float[])', 'float[]'),
  \ javaapi#method(0,'getPixel(', 'int, int, double[])', 'double[]'),
  \ javaapi#method(0,'getPixels(', 'int, int, int, int, int[])', 'int[]'),
  \ javaapi#method(0,'getPixels(', 'int, int, int, int, float[])', 'float[]'),
  \ javaapi#method(0,'getPixels(', 'int, int, int, int, double[])', 'double[]'),
  \ javaapi#method(0,'getSample(', 'int, int, int)', 'int'),
  \ javaapi#method(0,'getSampleFloat(', 'int, int, int)', 'float'),
  \ javaapi#method(0,'getSampleDouble(', 'int, int, int)', 'double'),
  \ javaapi#method(0,'getSamples(', 'int, int, int, int, int, int[])', 'int[]'),
  \ javaapi#method(0,'getSamples(', 'int, int, int, int, int, float[])', 'float[]'),
  \ javaapi#method(0,'getSamples(', 'int, int, int, int, int, double[])', 'double[]'),
  \ ])

call javaapi#namespace('java.awt.image')

call javaapi#interface('ImageConsumer', '', [
  \ javaapi#field(1,'RANDOMPIXELORDER', 'int'),
  \ javaapi#field(1,'TOPDOWNLEFTRIGHT', 'int'),
  \ javaapi#field(1,'COMPLETESCANLINES', 'int'),
  \ javaapi#field(1,'SINGLEPASS', 'int'),
  \ javaapi#field(1,'SINGLEFRAME', 'int'),
  \ javaapi#field(1,'IMAGEERROR', 'int'),
  \ javaapi#field(1,'SINGLEFRAMEDONE', 'int'),
  \ javaapi#field(1,'STATICIMAGEDONE', 'int'),
  \ javaapi#field(1,'IMAGEABORTED', 'int'),
  \ javaapi#method(0,'setDimensions(', 'int, int)', 'void'),
  \ javaapi#method(0,'setProperties(', 'Hashtable<?, ?>)', 'void'),
  \ javaapi#method(0,'setColorModel(', 'ColorModel)', 'void'),
  \ javaapi#method(0,'setHints(', 'int)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, ColorModel, byte[], int, int)', 'void'),
  \ javaapi#method(0,'setPixels(', 'int, int, int, int, ColorModel, int[], int, int)', 'void'),
  \ javaapi#method(0,'imageComplete(', 'int)', 'void'),
  \ ])

call javaapi#namespace('java.awt.image')

call javaapi#interface('ImageProducer', '', [
  \ javaapi#method(0,'addConsumer(', 'ImageConsumer)', 'void'),
  \ javaapi#method(0,'isConsumer(', 'ImageConsumer)', 'boolean'),
  \ javaapi#method(0,'removeConsumer(', 'ImageConsumer)', 'void'),
  \ javaapi#method(0,'startProduction(', 'ImageConsumer)', 'void'),
  \ javaapi#method(0,'requestTopDownLeftRightResend(', 'ImageConsumer)', 'void'),
  \ ])

call javaapi#namespace('java.awt.image')

call javaapi#class('VolatileImage', 'Image', [
  \ javaapi#field(1,'IMAGE_OK', 'int'),
  \ javaapi#field(1,'IMAGE_RESTORED', 'int'),
  \ javaapi#field(1,'IMAGE_INCOMPATIBLE', 'int'),
  \ javaapi#method(0,'VolatileImage(', ')', 'public'),
  \ javaapi#method(0,'getSnapshot(', ')', 'BufferedImage'),
  \ javaapi#method(0,'getWidth(', ')', 'int'),
  \ javaapi#method(0,'getHeight(', ')', 'int'),
  \ javaapi#method(0,'getSource(', ')', 'ImageProducer'),
  \ javaapi#method(0,'getGraphics(', ')', 'Graphics'),
  \ javaapi#method(0,'createGraphics(', ')', 'Graphics2D'),
  \ javaapi#method(0,'validate(', 'GraphicsConfiguration)', 'int'),
  \ javaapi#method(0,'contentsLost(', ')', 'boolean'),
  \ javaapi#method(0,'getCapabilities(', ')', 'ImageCapabilities'),
  \ javaapi#method(0,'getTransparency(', ')', 'int'),
  \ ])

call javaapi#namespace('java.awt.image')

call javaapi#class('IndexColorModel', 'ColorModel', [
  \ javaapi#method(0,'IndexColorModel(', 'int, int, byte[], byte[], byte[])', 'public'),
  \ javaapi#method(0,'IndexColorModel(', 'int, int, byte[], byte[], byte[], int)', 'public'),
  \ javaapi#method(0,'IndexColorModel(', 'int, int, byte[], byte[], byte[], byte[])', 'public'),
  \ javaapi#method(0,'IndexColorModel(', 'int, int, byte[], int, boolean)', 'public'),
  \ javaapi#method(0,'IndexColorModel(', 'int, int, byte[], int, boolean, int)', 'public'),
  \ javaapi#method(0,'IndexColorModel(', 'int, int, int[], int, boolean, int, int)', 'public'),
  \ javaapi#method(0,'IndexColorModel(', 'int, int, int[], int, int, BigInteger)', 'public'),
  \ javaapi#method(0,'getTransparency(', ')', 'int'),
  \ javaapi#method(0,'getComponentSize(', ')', 'int[]'),
  \ javaapi#method(0,'getMapSize(', ')', 'int'),
  \ javaapi#method(0,'getTransparentPixel(', ')', 'int'),
  \ javaapi#method(0,'getReds(', 'byte[])', 'void'),
  \ javaapi#method(0,'getGreens(', 'byte[])', 'void'),
  \ javaapi#method(0,'getBlues(', 'byte[])', 'void'),
  \ javaapi#method(0,'getAlphas(', 'byte[])', 'void'),
  \ javaapi#method(0,'getRGBs(', 'int[])', 'void'),
  \ javaapi#method(0,'getRed(', 'int)', 'int'),
  \ javaapi#method(0,'getGreen(', 'int)', 'int'),
  \ javaapi#method(0,'getBlue(', 'int)', 'int'),
  \ javaapi#method(0,'getAlpha(', 'int)', 'int'),
  \ javaapi#method(0,'getRGB(', 'int)', 'int'),
  \ javaapi#method(0,'getDataElements(', 'int, Object)', 'Object'),
  \ javaapi#method(0,'getComponents(', 'int, int[], int)', 'int[]'),
  \ javaapi#method(0,'getComponents(', 'Object, int[], int)', 'int[]'),
  \ javaapi#method(0,'getDataElement(', 'int[], int)', 'int'),
  \ javaapi#method(0,'getDataElements(', 'int[], int, Object)', 'Object'),
  \ javaapi#method(0,'createCompatibleWritableRaster(', 'int, int)', 'WritableRaster'),
  \ javaapi#method(0,'isCompatibleRaster(', 'Raster)', 'boolean'),
  \ javaapi#method(0,'createCompatibleSampleModel(', 'int, int)', 'SampleModel'),
  \ javaapi#method(0,'isCompatibleSampleModel(', 'SampleModel)', 'boolean'),
  \ javaapi#method(0,'convertToIntDiscrete(', 'Raster, boolean)', 'BufferedImage'),
  \ javaapi#method(0,'isValid(', 'int)', 'boolean'),
  \ javaapi#method(0,'isValid(', ')', 'boolean'),
  \ javaapi#method(0,'getValidPixels(', ')', 'BigInteger'),
  \ javaapi#method(0,'finalize(', ')', 'void'),
  \ javaapi#method(0,'toString(', ')', 'String'),
  \ ])

call javaapi#namespace('java.awt.image')

call javaapi#class('PackedColorModel', 'ColorModel', [
  \ javaapi#method(0,'PackedColorModel(', 'ColorSpace, int, int[], int, boolean, int, int)', 'public'),
  \ javaapi#method(0,'PackedColorModel(', 'ColorSpace, int, int, int, int, int, boolean, int, int)', 'public'),
  \ javaapi#method(0,'getMask(', 'int)', 'int'),
  \ javaapi#method(0,'getMasks(', ')', 'int[]'),
  \ javaapi#method(0,'createCompatibleSampleModel(', 'int, int)', 'SampleModel'),
  \ javaapi#method(0,'isCompatibleSampleModel(', 'SampleModel)', 'boolean'),
  \ javaapi#method(0,'getAlphaRaster(', 'WritableRaster)', 'WritableRaster'),
  \ javaapi#method(0,'equals(', 'Object)', 'boolean'),
  \ ])

call javaapi#class('DirectColorModel', 'PackedColorModel', [
  \ javaapi#method(0,'DirectColorModel(', 'int, int, int, int)', 'public'),
  \ javaapi#method(0,'DirectColorModel(', 'int, int, int, int, int)', 'public'),
  \ javaapi#method(0,'DirectColorModel(', 'ColorSpace, int, int, int, int, int, boolean, int)', 'public'),
  \ javaapi#method(0,'getRedMask(', ')', 'int'),
  \ javaapi#method(0,'getGreenMask(', ')', 'int'),
  \ javaapi#method(0,'getBlueMask(', ')', 'int'),
  \ javaapi#method(0,'getAlphaMask(', ')', 'int'),
  \ javaapi#method(0,'getRed(', 'int)', 'int'),
  \ javaapi#method(0,'getGreen(', 'int)', 'int'),
  \ javaapi#method(0,'getBlue(', 'int)', 'int'),
  \ javaapi#method(0,'getAlpha(', 'int)', 'int'),
  \ javaapi#method(0,'getRGB(', 'int)', 'int'),
  \ javaapi#method(0,'getRed(', 'Object)', 'int'),
  \ javaapi#method(0,'getGreen(', 'Object)', 'int'),
  \ javaapi#method(0,'getBlue(', 'Object)', 'int'),
  \ javaapi#method(0,'getAlpha(', 'Object)', 'int'),
  \ javaapi#method(0,'getRGB(', 'Object)', 'int'),
  \ javaapi#method(0,'getDataElements(', 'int, Object)', 'Object'),
  \ javaapi#method(0,'getComponents(', 'int, int[], int)', 'int[]'),
  \ javaapi#method(0,'getComponents(', 'Object, int[], int)', 'int[]'),
  \ javaapi#method(0,'createCompatibleWritableRaster(', 'int, int)', 'WritableRaster'),
  \ javaapi#method(0,'getDataElement(', 'int[], int)', 'int'),
  \ javaapi#method(0,'getDataElements(', 'int[], int, Object)', 'Object'),
  \ javaapi#method(0,'coerceData(', 'WritableRaster, boolean)', 'ColorModel'),
  \ javaapi#method(0,'isCompatibleRaster(', 'Raster)', 'boolean'),
  \ javaapi#method(0,'toString(', ')', 'String'),
  \ ])

call javaapi#class('ColorModel', 'Transparency', [
  \ javaapi#method(1,'getRGBdefault(', ')', 'ColorModel'),
  \ javaapi#method(0,'ColorModel(', 'int)', 'public'),
  \ javaapi#method(0,'hasAlpha(', ')', 'boolean'),
  \ javaapi#method(0,'isAlphaPremultiplied(', ')', 'boolean'),
  \ javaapi#method(0,'getTransferType(', ')', 'int'),
  \ javaapi#method(0,'getPixelSize(', ')', 'int'),
  \ javaapi#method(0,'getComponentSize(', 'int)', 'int'),
  \ javaapi#method(0,'getComponentSize(', ')', 'int[]'),
  \ javaapi#method(0,'getTransparency(', ')', 'int'),
  \ javaapi#method(0,'getNumComponents(', ')', 'int'),
  \ javaapi#method(0,'getNumColorComponents(', ')', 'int'),
  \ javaapi#method(0,'getRed(', 'int)', 'int'),
  \ javaapi#method(0,'getGreen(', 'int)', 'int'),
  \ javaapi#method(0,'getBlue(', 'int)', 'int'),
  \ javaapi#method(0,'getAlpha(', 'int)', 'int'),
  \ javaapi#method(0,'getRGB(', 'int)', 'int'),
  \ javaapi#method(0,'getRed(', 'Object)', 'int'),
  \ javaapi#method(0,'getGreen(', 'Object)', 'int'),
  \ javaapi#method(0,'getBlue(', 'Object)', 'int'),
  \ javaapi#method(0,'getAlpha(', 'Object)', 'int'),
  \ javaapi#method(0,'getRGB(', 'Object)', 'int'),
  \ javaapi#method(0,'getDataElements(', 'int, Object)', 'Object'),
  \ javaapi#method(0,'getComponents(', 'int, int[], int)', 'int[]'),
  \ javaapi#method(0,'getComponents(', 'Object, int[], int)', 'int[]'),
  \ javaapi#method(0,'getUnnormalizedComponents(', 'float[], int, int[], int)', 'int[]'),
  \ javaapi#method(0,'getNormalizedComponents(', 'int[], int, float[], int)', 'float[]'),
  \ javaapi#method(0,'getDataElement(', 'int[], int)', 'int'),
  \ javaapi#method(0,'getDataElements(', 'int[], int, Object)', 'Object'),
  \ javaapi#method(0,'getDataElement(', 'float[], int)', 'int'),
  \ javaapi#method(0,'getDataElements(', 'float[], int, Object)', 'Object'),
  \ javaapi#method(0,'getNormalizedComponents(', 'Object, float[], int)', 'float[]'),
  \ javaapi#method(0,'equals(', 'Object)', 'boolean'),
  \ javaapi#method(0,'hashCode(', ')', 'int'),
  \ javaapi#method(0,'getColorSpace(', ')', 'ColorSpace'),
  \ javaapi#method(0,'coerceData(', 'WritableRaster, boolean)', 'ColorModel'),
  \ javaapi#method(0,'isCompatibleRaster(', 'Raster)', 'boolean'),
  \ javaapi#method(0,'createCompatibleWritableRaster(', 'int, int)', 'WritableRaster'),
  \ javaapi#method(0,'createCompatibleSampleModel(', 'int, int)', 'SampleModel'),
  \ javaapi#method(0,'isCompatibleSampleModel(', 'SampleModel)', 'boolean'),
  \ javaapi#method(0,'finalize(', ')', 'void'),
  \ javaapi#method(0,'getAlphaRaster(', 'WritableRaster)', 'WritableRaster'),
  \ javaapi#method(0,'toString(', ')', 'String'),
  \ ])

call javaapi#namespace('java.awt.image')

call javaapi#class('BufferStrategy', '', [
  \ javaapi#method(0,'BufferStrategy(', ')', 'public'),
  \ javaapi#method(0,'getCapabilities(', ')', 'BufferCapabilities'),
  \ javaapi#method(0,'getDrawGraphics(', ')', 'Graphics'),
  \ javaapi#method(0,'contentsLost(', ')', 'boolean'),
  \ javaapi#method(0,'contentsRestored(', ')', 'boolean'),
  \ javaapi#method(0,'show(', ')', 'void'),
  \ javaapi#method(0,'dispose(', ')', 'void'),
  \ ])

call javaapi#namespace('java.awt.image')

call javaapi#interface('ImageObserver', '', [
  \ javaapi#field(1,'WIDTH', 'int'),
  \ javaapi#field(1,'HEIGHT', 'int'),
  \ javaapi#field(1,'PROPERTIES', 'int'),
  \ javaapi#field(1,'SOMEBITS', 'int'),
  \ javaapi#field(1,'FRAMEBITS', 'int'),
  \ javaapi#field(1,'ALLBITS', 'int'),
  \ javaapi#field(1,'ERROR', 'int'),
  \ javaapi#field(1,'ABORT', 'int'),
  \ javaapi#method(0,'imageUpdate(', 'Image, int, int, int, int, int)', 'boolean'),
  \ ])

